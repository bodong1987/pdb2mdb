<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.DiaSymReader</name>
    </assembly>
    <members>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedExtensions.GetEmbeddedSource(Microsoft.DiaSymReader.ISymUnmanagedDocument)">
            <summary>
            Returns the embedded source for specified document.
            </summary>
            <param name="document">The document to read source of.</param>
            <returns>
            default(<see cref="T:System.ArraySegment`1"/>) if the document doesn't have embedded source, 
            otherwise byte array segment containing the source.
            </returns>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedExtensions.GetCustomDebugInfo(Microsoft.DiaSymReader.ISymUnmanagedReader3,System.Int32,System.Int32)">
            <summary>
            Get the blob of binary custom debug info for a given method.
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.IMetadataImport.ResolveTypeRef(System.Int32,System.Guid@,System.Object@,System.Int32@)">
            <summary>
            Resolves type reference.
            </summary>
            <param name="typeRef">The TypeRef metadata token to return the referenced type information for.</param>
            <param name="scopeInterfaceId">The IID of the interface to return in scope. Typically, this would be IID_IMetaDataImport.</param>
            <param name="scope">An interface to the module scope in which the referenced type is defined.</param>
            <param name="typeDef">A pointer to a TypeDef token that represents the referenced type.</param>
            <remarks>
            TypeDefs define a type within a scope. TypeRefs refer to type-defs in other scopes
            and allow you to import a type from another scope. This function attempts to determine
            which type-def a type-ref points to.
            
            This resolve (type-ref, this cope) --> (type-def=*ptd, other scope=*ppIScope)
            
            However, this resolution requires knowing what modules have been loaded, which is not decided
            until runtime via loader / fusion policy. Thus this interface can't possibly be correct since
            it doesn't have that knowledge. Furthermore, when inspecting metadata from another process
            (such as a debugger inspecting the debuggee's metadata), this API can be truly misleading.
            
            This API usage should be avoided.
            </remarks>
        </member>
        <member name="M:Microsoft.DiaSymReader.IMetadataImportProvider.GetMetadataImport">
            <summary>
            Gets an instance of IMetadataImport.
            </summary>
            <remarks>
            The implementer is responsible for managing the lifetime of the resulting object.
            </remarks>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymReaderMetadataProvider.TryGetStandaloneSignature(System.Int32,System.Byte*@,System.Int32@)">
            <summary>
            Returns a pointer to signature blob corresponding to the specified token.
            </summary>
            <returns>Bytes or null, if the signature is not available.</returns>
        </member>
        <member name="T:Microsoft.DiaSymReader.SymReaderMetadataAdapter">
            <summary>
            Minimal implementation of IMetadataImport that implements APIs used by SymReader.
            </summary>
        </member>
        <member name="T:Microsoft.DiaSymReader.SymWriterMetadataAdapter">
            <summary>
            Minimal implementation of IMetadataImport that implements APIs used by SymReader and SymWriter.
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymEncUnmanagedMethod.GetFileNameFromOffset(System.Int32,System.Int32,System.Int32@,System.Char[])">
            <summary>
            Get the file name for the line associated with offset dwOffset.
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymEncUnmanagedMethod.GetLineFromOffset(System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Get the Line information associated with <paramref name="offset"/>.
            </summary>
            <remarks>
            If <paramref name="offset"/> is not a sequence point it is associated with the previous one.
            <paramref name="sequencePointOffset"/> provides the associated sequence point.
            </remarks>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymEncUnmanagedMethod.GetDocumentsForMethodCount(System.Int32@)">
            <summary>
            Get the number of Documents that this method has lines in.
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymEncUnmanagedMethod.GetDocumentsForMethod(System.Int32,System.Int32@,Microsoft.DiaSymReader.ISymUnmanagedDocument[])">
            <summary>
            Get the documents this method has lines in.
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymEncUnmanagedMethod.GetSourceExtentInDocument(Microsoft.DiaSymReader.ISymUnmanagedDocument,System.Int32@,System.Int32@)">
            <summary>
            Get the smallest start line and largest end line, for the method, in a specific document.
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedBinder.GetReaderForFile(System.Object,System.String,System.String,Microsoft.DiaSymReader.ISymUnmanagedReader@)">
            <summary>
            Given a metadata interface and a file name, returns a new instance of <see cref="T:Microsoft.DiaSymReader.ISymUnmanagedReader"/> 
            that will read the debugging symbols associated with the specified PE file.
            </summary>
            <param name="metadataImporter">An instance of IMetadataImport providing metadata for the specified PE file.</param>
            <param name="fileName">PE file path.</param>
            <param name="searchPath">Alternate path to search for debug data.</param>
            <param name="reader">The new reader instance.</param>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedBinder.GetReaderFromStream(System.Object,System.Object,Microsoft.DiaSymReader.ISymUnmanagedReader@)">
            <summary>
            Given a metadata interface and a stream that contains
            the symbol store, returns the <see cref="T:Microsoft.DiaSymReader.ISymUnmanagedReader"/>
            that will read the debugging symbols from the given
            symbol store.
            </summary>
            <param name="metadataImporter">An instance of IMetadataImport providing metadata for the corresponding PE file.</param>
            <param name="stream">PDB stream.</param>
            <param name="reader">The new reader instance.</param>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedBinder2.GetReaderForFile(System.Object,System.String,System.String,Microsoft.DiaSymReader.ISymUnmanagedReader@)">
            <summary>
            Given a metadata interface and a file name, returns the
            correct <see cref="T:Microsoft.DiaSymReader.ISymUnmanagedReader"/> that will read the debugging symbols
            associated with the module.
            </summary>
            <param name="metadataImporter">An instance of IMetadataImport providing metadata for the specified PE file.</param>
            <param name="fileName">PE file path.</param>
            <param name="searchPath">Alternate path to search for debug data.</param>
            <param name="reader">The new reader instance.</param>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedBinder2.GetReaderFromStream(System.Object,System.Object,Microsoft.DiaSymReader.ISymUnmanagedReader@)">
            <summary>
            Given a metadata interface and a stream that contains
            the symbol store, returns the <see cref="T:Microsoft.DiaSymReader.ISymUnmanagedReader"/>
            that will read the debugging symbols from the given
            symbol store.
            </summary>
            <param name="metadataImporter">An instance of IMetadataImport providing metadata for the corresponding PE file.</param>
            <param name="stream">PDB stream.</param>
            <param name="reader">The new reader instance.</param>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedBinder2.GetReaderForFile2(System.Object,System.String,System.String,Microsoft.DiaSymReader.SymUnmanagedSearchPolicy,Microsoft.DiaSymReader.ISymUnmanagedReader@)">
            <summary>
            Given a metadata interface and a file name, returns the 
            <see cref="T:Microsoft.DiaSymReader.ISymUnmanagedReader"/> interface that will read the debugging symbols associated
            with the module.
            </summary>
            <remarks>
            This version of the function can search for the PDB in areas other than
            right next to the module, controlled by the <paramref name="searchPolicy"/>.
            If a <paramref name="searchPath"/> is provided, those directories will always be searched.
            </remarks>
            <param name="metadataImporter">An instance of IMetadataImport providing metadata for the specified PE file.</param>
            <param name="fileName">PE file path.</param>
            <param name="searchPath">Alternate path to search for debug data.</param>
            <param name="searchPolicy">Search policy.</param>
            <param name="reader">The new reader instance.</param>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedBinder3.GetReaderForFile(System.Object,System.String,System.String,Microsoft.DiaSymReader.ISymUnmanagedReader@)">
            <summary>
            Given a metadata interface and a file name, returns the
            correct <see cref="T:Microsoft.DiaSymReader.ISymUnmanagedReader"/> that will read the debugging symbols
            associated with the module.
            </summary>
            <param name="metadataImporter">An instance of IMetadataImport providing metadata for the specified PE file.</param>
            <param name="fileName">PE file path.</param>
            <param name="searchPath">Alternate path to search for debug data.</param>
            <param name="reader">The new reader instance.</param>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedBinder3.GetReaderFromStream(System.Object,System.Object,Microsoft.DiaSymReader.ISymUnmanagedReader@)">
            <summary>
            Given a metadata interface and a stream that contains
            the symbol store, returns the <see cref="T:Microsoft.DiaSymReader.ISymUnmanagedReader"/>
            that will read the debugging symbols from the given
            symbol store.
            </summary>
            <param name="metadataImporter">An instance of IMetadataImport providing metadata for the corresponding PE file.</param>
            <param name="stream">PDB stream.</param>
            <param name="reader">The new reader instance.</param>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedBinder3.GetReaderForFile2(System.Object,System.String,System.String,Microsoft.DiaSymReader.SymUnmanagedSearchPolicy,Microsoft.DiaSymReader.ISymUnmanagedReader@)">
            <summary>
            Given a metadata interface and a file name, returns the 
            <see cref="T:Microsoft.DiaSymReader.ISymUnmanagedReader"/> interface that will read the debugging symbols associated
            with the module.
            </summary>
            <remarks>
            This version of the function can search for the PDB in areas other than
            right next to the module, controlled by the <paramref name="searchPolicy"/>.
            If a <paramref name="searchPath"/> is provided, those directories will always be searched.
            </remarks>
            <param name="metadataImporter">An instance of IMetadataImport providing metadata for the specified PE file.</param>
            <param name="fileName">PE file path.</param>
            <param name="searchPath">Alternate path to search for debug data.</param>
            <param name="searchPolicy">Search policy.</param>
            <param name="reader">The new reader instance.</param>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedBinder4.GetReaderForFile(System.Object,System.String,System.String,Microsoft.DiaSymReader.ISymUnmanagedReader@)">
            <summary>
            Given a metadata interface and a file name, returns the
            correct <see cref="T:Microsoft.DiaSymReader.ISymUnmanagedReader"/> that will read the debugging symbols
            associated with the module.
            </summary>
            <param name="metadataImporter">An instance of IMetadataImport providing metadata for the specified PE file.</param>
            <param name="fileName">PE file path.</param>
            <param name="searchPath">Alternate path to search for debug data.</param>
            <param name="reader">The new reader instance.</param>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedBinder4.GetReaderFromStream(System.Object,System.Object,Microsoft.DiaSymReader.ISymUnmanagedReader@)">
            <summary>
            Given a metadata interface and a stream that contains
            the symbol store, returns the <see cref="T:Microsoft.DiaSymReader.ISymUnmanagedReader"/>
            that will read the debugging symbols from the given
            symbol store.
            </summary>
            <param name="metadataImporter">An instance of IMetadataImport providing metadata for the corresponding PE file.</param>
            <param name="stream">PDB stream.</param>
            <param name="reader">The new reader instance.</param>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedBinder4.GetReaderForFile2(System.Object,System.String,System.String,Microsoft.DiaSymReader.SymUnmanagedSearchPolicy,Microsoft.DiaSymReader.ISymUnmanagedReader@)">
            <summary>
            Given a metadata interface and a file name, returns the 
            <see cref="T:Microsoft.DiaSymReader.ISymUnmanagedReader"/> interface that will read the debugging symbols associated
            with the module.
            </summary>
            <remarks>
            This version of the function can search for the PDB in areas other than
            right next to the module, controlled by the <paramref name="searchPolicy"/>.
            If a <paramref name="searchPath"/> is provided, those directories will always be searched.
            </remarks>
            <param name="metadataImporter">An instance of IMetadataImport providing metadata for the specified PE file.</param>
            <param name="fileName">PE file path.</param>
            <param name="searchPath">Alternate path to search for debug data.</param>
            <param name="searchPolicy">Search policy.</param>
            <param name="reader">The new reader instance.</param>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedBinder4.GetReaderFromPdbFile(Microsoft.DiaSymReader.IMetadataImportProvider,System.String,Microsoft.DiaSymReader.ISymUnmanagedReader@)">
            <summary>
            Creates a new <see cref="T:Microsoft.DiaSymReader.ISymUnmanagedReader"/> for the specified PDB file.
            </summary>
            <param name="metadataImportProvider">
            Provider of a metadata importer for the corresponding PE file.
            The importer is only constructed if the operation performed on the SymReader requires access
            to the metadata.
            </param>
            <param name="pdbFilePath">PDB file path.</param>
            <param name="reader">The new reader instance.</param>
            <returns>
            E_INVALIDARG
              <paramref name="metadataImportProvider"/> is null, or
              <paramref name="pdbFilePath"/> is null or empty.
            Another error code describing failure to open the file.
            </returns>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedBinder4.GetReaderFromPdbStream(Microsoft.DiaSymReader.IMetadataImportProvider,System.Object,Microsoft.DiaSymReader.ISymUnmanagedReader@)">
            <summary>
            Creates a new <see cref="T:Microsoft.DiaSymReader.ISymUnmanagedReader"/> for the specified PDB file.
            </summary>
            <param name="metadataImportProvider">
            Provider of a metadata importer for the corresponding PE file.
            The importer is only constructed if the operation performed on the SymReader requires access
            to the metadata.
            </param>
            <param name="stream">PDB stream.</param>
            <param name="reader">The new reader instance.</param>
            <returns>
            E_INVALIDARG
              <paramref name="metadataImportProvider"/> is null, or
              <paramref name="stream"/> is null.
            Another error code describing failure to open the file.
            </returns>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedEncUpdate.UpdateSymbolStore2(System.Runtime.InteropServices.ComTypes.IStream,Microsoft.DiaSymReader.SymUnmanagedLineDelta[],System.Int32)">
            <summary>
            Applies EnC edit.
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedEncUpdate.GetLocalVariableCount(System.Int32,System.Int32@)">
            <summary>
            Gets the number of local variables of the latest version of the specified method.
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedEncUpdate.GetLocalVariables(System.Int32,System.Int32,Microsoft.DiaSymReader.ISymUnmanagedVariable[],System.Int32@)">
            <summary>
            Gets local variables of the latest version of the specified method.
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedEncUpdate.UpdateMethodLines(System.Int32,System.Int32[],System.Int32)">
            <summary>
            Allows updating the line info for a method that has not been recompiled,
            but whose lines have moved independently.  A delta for each statement is allowed.
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedMethod.GetOffset(Microsoft.DiaSymReader.ISymUnmanagedDocument,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets the IL offset within the method that corresponds to the specified position.
            </summary>
            <param name="document">The document for which the offset is requested. </param>
            <param name="line">The document line corresponding to the offset. </param>
            <param name="column">The document column corresponding to the offset. </param>
            <param name="offset">The offset within the specified document.</param>
            <returns>HResult.</returns>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedMethod.GetRanges(Microsoft.DiaSymReader.ISymUnmanagedDocument,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32[])">
            <summary>
            Gets an array of start and end offset pairs that correspond to the ranges of IL that a given position covers within this method.
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedMethod.GetParameters(System.Int32,System.Int32@,Microsoft.DiaSymReader.ISymUnmanagedVariable[])">
            <summary>
            Gets method parameters.
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedMethod.GetSourceStartEnd(Microsoft.DiaSymReader.ISymUnmanagedDocument[],System.Int32[],System.Int32[],System.Boolean@)">
            <summary>
            Gets the start and end positions for the source of the current method.
            </summary>
            <param name="documents">The starting and ending source documents.</param>
            <param name="lines">The starting and ending lines in the corresponding source documents. </param>
            <param name="columns">The starting and ending columns in the corresponding source documents. </param>
            <param name="defined">true if the positions were defined; otherwise, false.</param>
            <returns>HResult</returns>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedMethod2.GetOffset(Microsoft.DiaSymReader.ISymUnmanagedDocument,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets the IL offset within the method that corresponds to the specified position.
            </summary>
            <param name="document">The document for which the offset is requested. </param>
            <param name="line">The document line corresponding to the offset. </param>
            <param name="column">The document column corresponding to the offset. </param>
            <param name="offset">The offset within the specified document.</param>
            <returns>HResult.</returns>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedMethod2.GetRanges(Microsoft.DiaSymReader.ISymUnmanagedDocument,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32[])">
            <summary>
            Gets an array of start and end offset pairs that correspond to the ranges of IL that a given position covers within this method.
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedMethod2.GetParameters(System.Int32,System.Int32@,Microsoft.DiaSymReader.ISymUnmanagedVariable[])">
            <summary>
            Gets method parameters.
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedMethod2.GetSourceStartEnd(Microsoft.DiaSymReader.ISymUnmanagedDocument[],System.Int32[],System.Int32[],System.Boolean@)">
            <summary>
            Gets the start and end positions for the source of the current method.
            </summary>
            <param name="documents">The starting and ending source documents.</param>
            <param name="lines">The starting and ending lines in the corresponding source documents. </param>
            <param name="columns">The starting and ending columns in the corresponding source documents. </param>
            <param name="defined">true if the positions were defined; otherwise, false.</param>
            <returns>HResult</returns>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedMethod2.GetLocalSignatureToken(System.Int32@)">
            <summary>
            Get the token of the local signature.
            </summary>
            <param name="localSignatureToken">Local signature token (StandAloneSig), or 0 if the method doesn't have any local variables.</param>
            <returns>
            S_OK if the method has a local signature,
            S_FALSE if the method doesn't have a local signature, 
            E_* if an error occurs while reading the signature.
            </returns>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedReader3.GetSymAttributeByVersion(System.Int32,System.Int32,System.String,System.Int32,System.Int32@,System.Byte[])">
            <summary>
            Gets a custom debug information based upon its name and an EnC 1-based version number. 
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedReader3.GetSymAttributeByVersionPreRemap(System.Int32,System.Int32,System.String,System.Int32,System.Int32@,System.Byte[])">
            <summary>
            Gets a custom debug information based upon its name and an EnC 1-based version number. 
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedReader4.GetSymAttributeByVersion(System.Int32,System.Int32,System.String,System.Int32,System.Int32@,System.Byte[])">
            <summary>
            Gets a custom debug information based upon its name and an EnC 1-based version number. 
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedReader4.GetSymAttributeByVersionPreRemap(System.Int32,System.Int32,System.String,System.Int32,System.Int32@,System.Byte[])">
            <summary>
            Gets a custom debug information based upon its name and an EnC 1-based version number. 
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedReader4.MatchesModule(System.Guid,System.UInt32,System.Int32,System.Boolean@)">
            <summary>
            Checkes whether the id stored in the PDB matches the PDB ID stored in the PE/COFF Debug Directory.
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedReader4.GetPortableDebugMetadata(System.Byte*@,System.Int32@)">
            <summary>
            Returns a pointer to Portable Debug Metadata. Only available for Portable PDBs.
            </summary>
            <param name="metadata">
            A pointer to memory where Portable Debug Metadata start. The memory is owned by the SymReader and 
            valid until <see cref="M:Microsoft.DiaSymReader.ISymUnmanagedDispose.Destroy"/> is invoked. 
            
            Null if the PDB is not portable.
            </param>
            <param name="size">Size of the metadata block.</param>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedReader4.GetSourceServerData(System.Byte*@,System.Int32@)">
            <summary>
            Returns a pointer to Source Server data stored in the PDB (source link data for Portable PDB or srcsvr section for Windows PDB).
            </summary>
            <param name="data">
            A pointer to memory where Source Server data start. The memory is owned by the SymReader and 
            valid until <see cref="M:Microsoft.DiaSymReader.ISymUnmanagedDispose.Destroy"/> is invoked. 
            
            Null if the PDB doesn't contain Source Server data.
            </param>
            <param name="size">Size of the data in bytes.</param>
            <remarks>
            This method is a replacement for <see cref="M:ISymUnmanagedSourceServerModule.GetSourceServerData"/>. 
            The reader doesn't implement <see cref="M:ISymUnmanagedSourceServerModule.GetSourceServerData"/> since 
            the format of the returned data is completely different for Portable PDBs, which the callers wouldn't expect.
            The native diasymreader may implement <see cref="M:Microsoft.DiaSymReader.ISymUnmanagedReader4.GetSourceServerData(System.Byte*@,System.Int32@)"/> by simply calling 
            to <see cref="M:ISymUnmanagedSourceServerModule.GetSourceServerData"/>. 
            </remarks>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedReader5.GetSymAttributeByVersion(System.Int32,System.Int32,System.String,System.Int32,System.Int32@,System.Byte[])">
            <summary>
            Gets a custom debug information based upon its name and an EnC 1-based version number. 
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedReader5.GetSymAttributeByVersionPreRemap(System.Int32,System.Int32,System.String,System.Int32,System.Int32@,System.Byte[])">
            <summary>
            Gets a custom debug information based upon its name and an EnC 1-based version number. 
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedReader5.MatchesModule(System.Guid,System.UInt32,System.Int32,System.Boolean@)">
            <summary>
            Checkes whether the id stored in the PDB matches the PDB ID stored in the PE/COFF Debug Directory.
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedReader5.GetPortableDebugMetadata(System.Byte*@,System.Int32@)">
            <summary>
            Returns a pointer to Portable Debug Metadata. Only available for Portable PDBs.
            </summary>
            <param name="metadata">
            A pointer to memory where Portable Debug Metadata start. The memory is owned by the SymReader and 
            valid until <see cref="M:Microsoft.DiaSymReader.ISymUnmanagedDispose.Destroy"/> is invoked. 
            
            Null if the PDB is not portable.
            </param>
            <param name="size">Size of the metadata block.</param>
            <returns>
            S_OK if the PDB is portable, S_FALSE if it isn't.
            </returns>
            <remarks>
            If the store was updated via <see cref="M:Microsoft.DiaSymReader.ISymUnmanagedReader5.UpdateSymbolStore(System.String,System.Runtime.InteropServices.ComTypes.IStream)"/> 
            returns the metadata of the latest update.
            </remarks>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedReader5.GetSourceServerData(System.Byte*@,System.Int32@)">
            <summary>
            Returns a pointer to Source Server data stored in the PDB.
            </summary>
            <param name="data">
            A pointer to memory where Source Server data start. The memory is owned by the SymReader and 
            valid until <see cref="M:Microsoft.DiaSymReader.ISymUnmanagedDispose.Destroy"/> is invoked. 
            
            Null if the PDB doesn't contain Source Server data.
            </param>
            <param name="size">Size of the data in bytes.</param>
            <returns>
            S_OK if the PDB contains Source Server data, S_FALSE if it doesn't.
            </returns>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedReader5.GetPortableDebugMetadataByVersion(System.Int32,System.Byte*@,System.Int32@)">
            <summary>
            Returns a pointer to Portable Debug Metadata of the specified version (EnC generation). Only available for Portable PDBs.
            </summary>
            <param name="version">
            EnC 1-based version number. Version 1 corresponds to the baseline.
            </param>
            <param name="metadata">
            A pointer to memory where Portable Debug Metadata start. The memory is owned by the SymReader and 
            valid until <see cref="M:Microsoft.DiaSymReader.ISymUnmanagedDispose.Destroy"/> is invoked. 
            
            Null if the PDB is not portable.
            </param>
            <param name="size">Size of the metadata block.</param>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedSourceServerModule.GetSourceServerData(System.Int32@,System.Byte*@)">
            <summary>
            Returns the source server data for the module.
            </summary>
            <param name="length">Length of the data.</param>
            <param name="data">
            Pointer to a newly allocated memory containing the data. 
            Caller must free using <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)"/>.
            </param>
            <returns>
            S_OK on success.
            </returns>
        </member>
        <member name="T:Microsoft.DiaSymReader.SymUnmanagedLineDelta">
            <summary>
            Line deltas allow a compiler to omit functions that have not been modified from
            the pdb stream provided the line information meets the following condition.
            The correct line information can be determined with the old pdb line info and
            one delta for all lines in the function.
            </summary>
        </member>
        <member name="T:Microsoft.DiaSymReader.SymUnmanagedReaderCreationOptions">
            <summary>
            <see cref="T:Microsoft.DiaSymReader.ISymUnmanagedReader"/> creation options.
            </summary>
        </member>
        <member name="F:Microsoft.DiaSymReader.SymUnmanagedReaderCreationOptions.Default">
            <summary>
            Default options.
            </summary>
        </member>
        <member name="F:Microsoft.DiaSymReader.SymUnmanagedReaderCreationOptions.UseAlternativeLoadPath">
            <summary>
            Use environment variable MICROSOFT_DIASYMREADER_NATIVE_ALT_LOAD_PATH to locate Microsoft.DiaSymReader.Native.{platform}.dll.
            </summary>
        </member>
        <member name="F:Microsoft.DiaSymReader.SymUnmanagedReaderCreationOptions.UseComRegistry">
            <summary>
            Use COM registry to locate an implementation of the reader.
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedReaderFactory.CreateReaderWithMetadataImport``1(System.IO.Stream,System.Object,Microsoft.DiaSymReader.SymUnmanagedReaderCreationOptions)">
            <summary>
            Creates <see cref="T:Microsoft.DiaSymReader.ISymUnmanagedReader"/> instance and initializes it with specified PDB stream and metadata import object.
            </summary>
            <param name="pdbStream">Windows PDB stream.</param>
            <param name="metadataImport">IMetadataImport implementation.</param>
            <param name="options">Options.</param>
            <remarks>
            Tries to load the implementation of the PDB reader from Microsoft.DiaSymReader.Native.{platform}.dll library first.
            It searches for this library in the directory Microsoft.DiaSymReader.dll is loaded from, 
            the application directory, the %WinDir%\System32 directory, and user directories in the DLL search path, in this order.
            If not found in the above locations and <see cref="F:Microsoft.DiaSymReader.SymUnmanagedReaderCreationOptions.UseAlternativeLoadPath"/> option is specified
            the directory specified by MICROSOFT_DIASYMREADER_NATIVE_ALT_LOAD_PATH environment variable is also searched.
            If the Microsoft.DiaSymReader.Native.{platform}.dll library can't be found and <see cref="F:Microsoft.DiaSymReader.SymUnmanagedReaderCreationOptions.UseComRegistry"/> 
            option is specified checks if the PDB reader is available from a globally registered COM object. This COM object is provided 
            by .NET Framework and has limited functionality (up to <see cref="T:Microsoft.DiaSymReader.ISymUnmanagedReader3"/>).
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="pdbStream"/>is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadataImport"/>is null.</exception>
            <exception cref="T:System.DllNotFoundException">The SymReader implementation is not available or failed to load.</exception>
            <exception cref="T:System.NotSupportedException">The implementation doesn't support specified <genericparamref name="TSymUnmanagedReader"/> interface.</exception>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedReaderFactory.CreateReader``1(System.IO.Stream,Microsoft.DiaSymReader.ISymReaderMetadataProvider,Microsoft.DiaSymReader.SymUnmanagedReaderCreationOptions)">
            <summary>
            Creates <see cref="T:Microsoft.DiaSymReader.ISymUnmanagedReader"/> instance and initializes it with specified PDB stream and metadata provider.
            </summary>
            <param name="pdbStream">Windows PDB stream.</param>
            <param name="metadataProvider"><see cref="T:Microsoft.DiaSymReader.ISymReaderMetadataProvider"/> implementation.</param>
            <param name="options">Options.</param>
            <remarks>
            Tries to load the implementation of the PDB reader from Microsoft.DiaSymReader.Native.{platform}.dll library first.
            It searches for this library in the directory Microsoft.DiaSymReader.dll is loaded from, 
            the application directory, the %WinDir%\System32 directory, and user directories in the DLL search path, in this order.
            If not found in the above locations and <see cref="F:Microsoft.DiaSymReader.SymUnmanagedReaderCreationOptions.UseAlternativeLoadPath"/> option is specified
            the directory specified by MICROSOFT_DIASYMREADER_NATIVE_ALT_LOAD_PATH environment variable is also searched.
            If the Microsoft.DiaSymReader.Native.{platform}.dll library can't be found and <see cref="F:Microsoft.DiaSymReader.SymUnmanagedReaderCreationOptions.UseComRegistry"/> 
            option is specified checks if the PDB reader is available from a globally registered COM object. This COM object is provided 
            by .NET Framework and has limited functionality (up to <see cref="T:Microsoft.DiaSymReader.ISymUnmanagedReader3"/>).
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="pdbStream"/>is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadataProvider"/>is null.</exception>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedReaderFactory.CreateSymReaderMetadataImport(Microsoft.DiaSymReader.ISymReaderMetadataProvider)">
            <summary>
            Creates a minimal implementation of IMetadataImport required for reading PDBs based on given <see cref="T:Microsoft.DiaSymReader.ISymReaderMetadataProvider"/>.
            </summary>
            <param name="metadataProvider">Reads metadata.</param>
            <returns>An instance of IMetadataImport.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadataProvider"/>is null.</exception>
        </member>
        <member name="F:Microsoft.DiaSymReader.SymUnmanagedSearchPolicy.AllowRegistryAccess">
            <summary>
            Query the registry for symbol search paths.
            </summary>
        </member>
        <member name="F:Microsoft.DiaSymReader.SymUnmanagedSearchPolicy.AllowSymbolServerAccess">
            <summary>
            Access a symbol server.
            </summary>
        </member>
        <member name="F:Microsoft.DiaSymReader.SymUnmanagedSearchPolicy.AllowOriginalPathAccess">
            <summary>
            Look at the path specified in Debug Directory.
            </summary>
        </member>
        <member name="F:Microsoft.DiaSymReader.SymUnmanagedSearchPolicy.AllowReferencePathAccess">
            <summary>
            Look for PDB in the place where the exe is.
            </summary>
        </member>
        <member name="T:Microsoft.DiaSymReader.ComMemoryStream">
            <summary>
            A COM IStream implementation over memory. Supports just enough for DiaSymReader's PDB writing.
            Also tuned for performance:
            1. SetSize (and Seek beyond the length) is very fast and doesn't re-allocate the underlying memory.
            2. Read and Write are optimized to avoid copying (see <see cref="T:Microsoft.DiaSymReader.IUnsafeComStream"/>)
            3. Allocates in chunks instead of a contiguous buffer to avoid re-alloc and copy costs when growing.
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.ComStreamWrapper.TryReadAll(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Attempts to read all of the requested bytes from the stream into the buffer
            </summary>
            <returns>
            The number of bytes read. Less than <paramref name="count" /> will
            only be returned if the end of stream is reached before all bytes can be read.
            </returns>
            <remarks>
            Unlike <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/> it is not guaranteed that
            the stream position or the output buffer will be unchanged if an exception is
            returned.
            </remarks>
        </member>
        <member name="M:Microsoft.DiaSymReader.ComStreamWrapper.Read(System.Byte[],System.Int32,System.IntPtr)">
            <summary>
            The actual number of bytes read can be fewer than the number of bytes requested 
            if an error occurs or if the end of the stream is reached during the read operation.
            </summary>
        </member>
        <member name="T:Microsoft.DiaSymReader.IUnsafeComStream">
            <summary>
            This is a re-definition of COM's IStream interface. The important change is that
            the Read and Write methods take an <see cref="T:System.IntPtr"/> instead of a byte[] to avoid the
            allocation cost when called from native code.
            </summary>
        </member>
        <member name="T:Microsoft.DiaSymReader.ISymUnmanagedWriter5">
            <summary>
            The highest version of the interface available on Desktop FX 4.0+.
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedWriter5.DefineConstant2(System.String,Microsoft.DiaSymReader.VariantStructure,System.Int32)">
            <remarks>
            <paramref name="value"/> has type <see cref="T:Microsoft.DiaSymReader.VariantStructure"/>, rather than <see cref="T:System.Object"/>,
            so that we can do custom marshalling of <see cref="T:System.DateTime"/>.  Unfortunately, .NET marshals
            <see cref="T:System.DateTime"/>s as the number of days since 1899/12/30, whereas the native VB compiler
             marshalled them as the number of ticks since the Unix epoch (i.e. a much, much larger number).
            </remarks>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedWriter5.OpenMapTokensToSourceSpans">
            <summary>
            Open a special custom data section to emit token to source span mapping information into. 
            Opening this section while a method is already open or vice versa is an error.
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedWriter5.CloseMapTokensToSourceSpans">
            <summary>
            Close the special custom data section for token to source span mapping
            information. Once it is closed no more mapping information can be added.
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.ISymUnmanagedWriter5.MapTokenToSourceSpan(System.Int32,Microsoft.DiaSymReader.ISymUnmanagedDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Maps the given metadata token to the given source line span in the specified source file. 
            Must be called between calls to <see cref="M:Microsoft.DiaSymReader.ISymUnmanagedWriter5.OpenMapTokensToSourceSpans"/> and <see cref="M:Microsoft.DiaSymReader.ISymUnmanagedWriter5.CloseMapTokensToSourceSpans"/>.
            </summary>
        </member>
        <member name="T:Microsoft.DiaSymReader.ISymUnmanagedWriter8">
            <summary>
            The highest version of the interface available in Microsoft.DiaSymReader.Native.
            </summary>
        </member>
        <member name="T:Microsoft.DiaSymReader.VariantStructure">
            <summary>
            A struct with the same size and layout as the native VARIANT type:
              2 bytes for a discriminator (i.e. which type of variant it is).
              6 bytes of padding
              8 or 16 bytes of data
            </summary>
        </member>
        <member name="F:Microsoft.DiaSymReader.VariantStructure._padding">
            <summary>
            This field determines the size of the struct 
            (16 bytes on 32-bit platforms, 24 bytes on 64-bit platforms).
            </summary>
        </member>
        <member name="T:Microsoft.DiaSymReader.VariantPadding">
            <summary>
            This type is 8 bytes on a 32-bit platforms and 16 bytes on 64-bit platforms.
            </summary>
        </member>
        <member name="T:Microsoft.DiaSymReader.SymUnmanagedWriter">
            <summary>
            Windows PDB writer.
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedWriter.Dispose">
            <summary>
            Diposes the writer.
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedWriter.GetUnderlyingData">
            <summary>
            Gets the raw data blobs that comprise the written PDB content so far.
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedWriter.WriteTo(System.IO.Stream)">
            <summary>
            Writes the PDB data to specified stream. Once called no more changes to the data can be made using this writer.
            May be called multiple times. Always writes the same data. 
            </summary>
            <param name="stream">Stream to write PDB data to.</param>
            <exception cref="T:Microsoft.DiaSymReader.SymUnmanagedWriterException">Error occurred while writing data to the stream.</exception>
        </member>
        <member name="P:Microsoft.DiaSymReader.SymUnmanagedWriter.DocumentTableCapacity">
            <summary>
            The capacity of document table. 
            </summary>
            <remarks>
            Whenever a document is defined an entry is added to this table. 
            If the number of documents is known upfront setting this value may reduce memory consumption.
            </remarks>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid,System.Guid,System.Byte[],System.Byte[])">
            <summary>
            Defines a source document.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Writes are not allowed to the underlying stream.</exception>
            <exception cref="T:Microsoft.DiaSymReader.SymUnmanagedWriterException">Error occurred while writing PDB data.</exception>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedWriter.DefineSequencePoints(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Defines sequence points.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Writes are not allowed to the underlying stream.</exception>
            <exception cref="T:Microsoft.DiaSymReader.SymUnmanagedWriterException">Error occurred while writing PDB data.</exception>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedWriter.OpenMethod(System.Int32)">
            <summary>
            Opens a method.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Writes are not allowed to the underlying stream.</exception>
            <exception cref="T:Microsoft.DiaSymReader.SymUnmanagedWriterException">Error occurred while writing PDB data.</exception>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedWriter.CloseMethod">
            <summary>
            Closes a method previously open using <see cref="M:Microsoft.DiaSymReader.SymUnmanagedWriter.OpenMethod(System.Int32)"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Writes are not allowed to the underlying stream.</exception>
            <exception cref="T:Microsoft.DiaSymReader.SymUnmanagedWriterException">Error occurred while writing PDB data.</exception>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedWriter.OpenScope(System.Int32)">
            <summary>
            Opens a local scope.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Writes are not allowed to the underlying stream.</exception>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedWriter.CloseScope(System.Int32)">
            <summary>
            Closes a local scope previously open using <see cref="M:Microsoft.DiaSymReader.SymUnmanagedWriter.OpenScope(System.Int32)"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Writes are not allowed to the underlying stream.</exception>
            <exception cref="T:Microsoft.DiaSymReader.SymUnmanagedWriterException">Error occurred while writing PDB data.</exception>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedWriter.DefineLocalVariable(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Defines a local variable.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Writes are not allowed to the underlying stream.</exception>
            <exception cref="T:Microsoft.DiaSymReader.SymUnmanagedWriterException">Error occurred while writing PDB data.</exception>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedWriter.DefineLocalConstant(System.String,System.Object,System.Int32)">
            <summary>
            Defines a local constant.
            </summary>
            <param name="name">Name of the constant.</param>
            <param name="value">Value.</param>
            <param name="constantSignatureToken">Standalone signature token encoding the static type of the constant.</param>
            <returns>False if the constant representation is too long (e.g. long string).</returns>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Writes are not allowed to the underlying stream.</exception>
            <exception cref="T:Microsoft.DiaSymReader.SymUnmanagedWriterException">Error occurred while writing PDB data.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null</exception>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedWriter.UsingNamespace(System.String)">
            <summary>
            Adds namespace import.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Writes are not allowed to the underlying stream.</exception>
            <exception cref="T:Microsoft.DiaSymReader.SymUnmanagedWriterException">Error occurred while writing PDB data.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="importString"/> is null</exception>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedWriter.SetAsyncInfo(System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary>
            Sets method async information.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Writes are not allowed to the underlying stream.</exception>
            <exception cref="T:Microsoft.DiaSymReader.SymUnmanagedWriterException">Error occurred while writing PDB data.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="yieldOffsets"/> or <paramref name="resumeOffsets"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="yieldOffsets"/> or <paramref name="resumeOffsets"/> differ in length.</exception>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedWriter.DefineCustomMetadata(System.Byte[])">
            <summary>
            Associates custom debug information blob with the current method.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Writes are not allowed to the underlying stream.</exception>
            <exception cref="T:Microsoft.DiaSymReader.SymUnmanagedWriterException">Error occurred while writing PDB data.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadata"/> is null</exception>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedWriter.SetEntryPoint(System.Int32)">
            <summary>
            Designates specified method as an entry point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Writes are not allowed to the underlying stream.</exception>
            <exception cref="T:Microsoft.DiaSymReader.SymUnmanagedWriterException">Error occurred while writing PDB data.</exception>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedWriter.UpdateSignature(System.Guid,System.UInt32,System.Int32)">
            <summary>
            Updates the current PDB signature.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Writes are not allowed to the underlying stream.</exception>
            <exception cref="T:Microsoft.DiaSymReader.SymUnmanagedWriterException">Error occurred while writing PDB data.</exception>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedWriter.GetSignature(System.Guid@,System.UInt32@,System.Int32@)">
            <summary>
            Gets the current PDB signature.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed.</exception>
            <exception cref="T:Microsoft.DiaSymReader.SymUnmanagedWriterException">Error occurred while writing PDB data.</exception>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedWriter.SetSourceServerData(System.Byte[])">
            <summary>
            Sets source server data blob (srcsvr stream).
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Writes are not allowed to the underlying stream.</exception>
            <exception cref="T:Microsoft.DiaSymReader.SymUnmanagedWriterException">Error occurred while writing PDB data.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null</exception>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedWriter.SetSourceLinkData(System.Byte[])">
            <summary>
            Sets source link data blob (sourcelink stream).
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Writes are not allowed to the underlying stream.</exception>
            <exception cref="T:Microsoft.DiaSymReader.SymUnmanagedWriterException">Error occurred while writing PDB data.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null</exception>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedWriter.OpenTokensToSourceSpansMap">
            <summary>
            Opens a map of tokens to source spans.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Writes are not allowed to the underlying stream.</exception>
            <exception cref="T:Microsoft.DiaSymReader.SymUnmanagedWriterException">Error occurred while writing PDB data.</exception>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedWriter.MapTokenToSourceSpan(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Maps specified token to a source span.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Writes are not allowed to the underlying stream.</exception>
            <exception cref="T:Microsoft.DiaSymReader.SymUnmanagedWriterException">Error occurred while writing PDB data.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="documentIndex"/> doesn't correspond to any defined document.</exception>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedWriter.CloseTokensToSourceSpansMap">
            <summary>
            Closes map of tokens to source spans previously opened using <see cref="M:Microsoft.DiaSymReader.SymUnmanagedWriter.OpenTokensToSourceSpansMap"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Writes are not allowed to the underlying stream.</exception>
            <exception cref="T:Microsoft.DiaSymReader.SymUnmanagedWriterException">Error occurred while writing PDB data.</exception>
        </member>
        <member name="T:Microsoft.DiaSymReader.SymUnmanagedWriterCreationOptions">
            <summary>
            <see cref="T:Microsoft.DiaSymReader.SymUnmanagedWriter"/> creation options.
            </summary>
        </member>
        <member name="F:Microsoft.DiaSymReader.SymUnmanagedWriterCreationOptions.Default">
            <summary>
            Default options.
            </summary>
        </member>
        <member name="F:Microsoft.DiaSymReader.SymUnmanagedWriterCreationOptions.UseAlternativeLoadPath">
            <summary>
            Use environment variable MICROSOFT_DIASYMREADER_NATIVE_ALT_LOAD_PATH to locate Microsoft.DiaSymReader.Native.{platform}.dll.
            </summary>
        </member>
        <member name="F:Microsoft.DiaSymReader.SymUnmanagedWriterCreationOptions.UseComRegistry">
            <summary>
            Use COM registry to locate an implementation of the writer.
            </summary>
        </member>
        <member name="F:Microsoft.DiaSymReader.SymUnmanagedWriterCreationOptions.Deterministic">
            <summary>
            Create a deterministic PDB writer.
            </summary>
        </member>
        <member name="T:Microsoft.DiaSymReader.SymUnmanagedWriterException">
            <summary>
            Exception reported when PDB write operation fails.
            </summary>
        </member>
        <member name="P:Microsoft.DiaSymReader.SymUnmanagedWriterException.ImplementationModuleName">
            <summary>
            The name of the module that implements the underlying PDB writer (e.g. diasymreader.dll), or null if not available.
            </summary>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedWriterFactory.CreateWriter(Microsoft.DiaSymReader.ISymWriterMetadataProvider,Microsoft.DiaSymReader.SymUnmanagedWriterCreationOptions)">
            <summary>
            Creates a Windows PDB writer.
            </summary>
            <param name="metadataProvider"><see cref="T:Microsoft.DiaSymReader.ISymWriterMetadataProvider"/> implementation.</param>
            <param name="options">Options.</param>
            <remarks>
            Tries to load the implementation of the PDB writer from Microsoft.DiaSymReader.Native.{platform}.dll library first.
            It searches for this library in the directory Microsoft.DiaSymReader.dll is loaded from, 
            the application directory, the %WinDir%\System32 directory, and user directories in the DLL search path, in this order.
            If not found in the above locations and <see cref="F:Microsoft.DiaSymReader.SymUnmanagedWriterCreationOptions.UseAlternativeLoadPath"/> option is specified
            the directory specified by MICROSOFT_DIASYMREADER_NATIVE_ALT_LOAD_PATH environment variable is also searched.
            If the Microsoft.DiaSymReader.Native.{platform}.dll library can't be found and <see cref="F:Microsoft.DiaSymReader.SymUnmanagedWriterCreationOptions.UseComRegistry"/> 
            option is specified checks if the PDB reader is available from a globally registered COM object. This COM object is provided 
            by .NET Framework and has limited functionality (features like determinism and source link are not supported).
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="metadataProvider"/>is null.</exception>
            <exception cref="T:System.DllNotFoundException">The SymWriter implementation is not available or failed to load.</exception>
            <exception cref="T:Microsoft.DiaSymReader.SymUnmanagedWriterException">Error creating the PDB writer. See inner exception for root cause.</exception>
        </member>
        <member name="M:Microsoft.DiaSymReader.SymUnmanagedWriterImpl.WriteTo(System.IO.Stream)">
            <summary>
            Writes teh content to the given stream. The writer is disposed and can't be used for further writing.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
            <summary>
            Indicates that a method is an extension method, or that a class or assembly contains extension methods.
            </summary>
        </member>
    </members>
</doc>
